[{"content":"AI Checklist for Startups Introduction Predicting the future: as old as Civilization Machines and Clerical record keeping Advent of connected machines Commoditized Storage and compute Data Hoarding Statistical Modelling for Business Data From human perceivable statistics to abstract high dimension modelling Machine learning at scale Advent of self supervised models Taking learning by example to the extreme Supersizing Training data as well as model weights. Generative/ Adversarial Learning General Intelligence Statistics 101 Regression and curve fitting Classification Clustering Nearest Neighbor Searching Dimensions and data modelling Exploratory Data Analysis # Disciplines NLP Image Audio Time Series User Behavior Use Cases User behavior analysis Think of a retail experience. Whether online or in person, businesses collect a vast amount of customer purchase information. Running this data through a machine learning algorithm allows businesses to predict consumer purchasing habits, market trends, popular products, and so on, allowing retailers to make informed business decisions based on this predicted information. For instance, ML enables companies to: Make accurate decisions on managing stock Streamline ordering according to market and consumer demand Increase the overall efficiency of the logistical and operational processes Integrate with marketing platforms to directly market products targeted at specific consumers In an online environment, ML can: Analyze user browsing habits Predict user preferences accurately Offer targeted suggestions In a pharmaceutical business that runs drug trials, user behavior analysis can help determine the effectiveness of drugs and predict any anomalies and outliers. In the maritime industry, a logistics company can predict shipping demand by feeding the logistical data such as routes, transported goods, durations, etc. to a machine learning algorithm. Analyzing user behavior is not limited to consumers. Any entity in this context can be considered users who interact with the business. ML can be used to extract hidden patterns and behaviors that may not be readily visible on the surface, offering businesses a far greater understanding of the overall business processes. Manufacturing \u0026amp; Industrial Automation Greatly reduce manufacturing defects Increasing efficiency and scalability of existing process Predictive Maintenance Automated Workers. Security for your Product Anomaly Detection Content Moderation Spam/phishing prevention large scale automated audits Financial Predictions for your Business Expenses, sales forecasts Algorithmic Trading A differentiation with Innovative user experience Vision for scanning receipts Voice promps to Voice assistans Typical Project Lifecycle Phase 0: Understanding your Problem Space Phase 1: Data Ingestion Sources and Formats Data Storage Solutions Data Management and Provenance Schema Registry Streaming vs Batch Ingestion Phase 2: Schema and Model Registry Phase 3: Model Serving Phase 4: Evaluation and Reporting Phase 5: Retraining Learning Resources IvyLeague Content https://executive.mit.edu/on/demandware.static/-/Sites-master-catalog-msee/default/dw4c31839c/brochures/machine-learning-brochure.pdf\nTurning data into value: building an AI-enabled organization | Stanford Online\nGithub/Chapters\n5* - microsoft/**Data-Science-For-Beginners**Public IoT for beginners https://github.com/microsoft/IoT-For-Beginners/blob/main/sketchnotes/Roadmap.jpg?raw=true 5* - https://github.com/gedeck/practical-statistics-for-data-scientists 2* - https://github.com/alinasahoo/python-data-science-essentials-2 ","permalink":"https://blog.shaishav.kr/pages/ai-checklist-for-startups/","summary":"AI Checklist for Startups Introduction Predicting the future: as old as Civilization Machines and Clerical record keeping Advent of connected machines Commoditized Storage and compute Data Hoarding Statistical Modelling for Business Data From human perceivable statistics to abstract high dimension modelling Machine learning at scale Advent of self supervised models Taking learning by example to the extreme Supersizing Training data as well as model weights. Generative/ Adversarial Learning General Intelligence Statistics 101 Regression and curve fitting Classification Clustering Nearest Neighbor Searching Dimensions and data modelling Exploratory Data Analysis # Disciplines NLP Image Audio Time Series User Behavior Use Cases User behavior analysis Think of a retail experience.","title":"AI Checklist for Startups"},{"content":"AsyncAwait Organizations Illustrate the problem Talk about the Core Idea of the Solution Evidence about the Solution Approach Solution Playbook Call to Action Footnotes Decision Framework\nIs it easy to explain the solution? Is it easy to roll out? within a team? can be adopted by a mid-senior member in their 20% time in one sprint Across Teams? Across the whole org? Is it easy to enforce adoption? eg. Linting style guides using Vale for a Docs repository, or GitHub actions for release tags names. Is it Remote-Work friendly? What\u0026rsquo;s it Bore-Score? 0 - Interesting work. done somewhat infrequently. but people enjoy doing it. takes \u0026lt; 5 minutes of their time 1-2 manual/boring/rote work done once. Organized by a few people, may require more users to take a one time step 3-4 manual/repetitive/rote work done by a small set of people a few times a month 5 - super manual+ repetitive +boring work + done by many people! Is it a Portable Solution Is there a vendor lock-in How much does this cost? CapEx vs OpEx Unreasonable Effectiveness of Text Only Tools and Processes ","permalink":"https://blog.shaishav.kr/pages/asyncawait-organizations/","summary":"AsyncAwait Organizations Illustrate the problem Talk about the Core Idea of the Solution Evidence about the Solution Approach Solution Playbook Call to Action Footnotes Decision Framework\nIs it easy to explain the solution? Is it easy to roll out? within a team? can be adopted by a mid-senior member in their 20% time in one sprint Across Teams? Across the whole org? Is it easy to enforce adoption? eg. Linting style guides using Vale for a Docs repository, or GitHub actions for release tags names.","title":"AsyncAwait Organizations"},{"content":"Efficient Git Workflow with Stacked PRs Illustrate the problem Big PRs %% statistics about time spent by senior devs in PR reviews. short 2-3lines. quote with reference+statistics from mid sized startups %% %% why big PRs are harder to make sense of . general intro - 2 lines. %% %% define BIG PR. 400line changes as per google\u0026rsquo;s guidelines. short , 2 lines %% %% types of PR changes. chore vs feature, vs hotfix vs bugfix vs improvement. refer to conventional commits. Any PR mixing these changes into one single Big PR is trying to do too much. violates KISS. elaborate with 3-4lines %% %% The need to make a PR reviewer responsible/accountable for PRs they accept. can\u0026rsquo;t expect this, if PRs aren\u0026rsquo;t easy to understand/work with %% %% where does the buck stop when changes cause issues. PR reviewers will happily take responsibility, if they knew what they were signing off on. %% %% people delay proper reviews, or only do code-read reviews if the changes are large. smaller changes are easier to pull, run and verify %% Meta-repos and PR Reviews %% Rise of meta-repos. infra as code, documentation as code, client side components, microservice backends, multiple languages %% %% code ownership models and multiple owners for large PR dilutes responsibility %% %% mixing multiple component changes into one PR always puts the focus on the most changed component. ideally should have focus on ALL components. non-negotiable for quality %% ### PRs with separation of concern. %% Difficulty building tools for CI/CD when PRs get more complex %% %% easier to write workflows and CI for small PRs which are isolated to components. QA needs this to guarantee tests provide a safety net for velocity. 3-4 lines %% Talk about the Core Idea of the Solution Evidence about the Solution Approach Solution Playbook Call to Action Footnotes How to visualize stacked git branches | by Greg Foster | Medium Stacked Diffs: Keeping Phabricator Diffs Small | by Kurtis Nusbaum | Medium Stacked pull requests: make code reviews faster, easier, and more effective - Dr. McKayla Stacked Diffs Versus Pull Requests | Jackson Gabbard\u0026rsquo;s Blog Stacked Diffs versus Pull Requests (2018) | Hacker News GitHub - timothyandrew/gh-stack: Manage PR stacks/chains on Github Graphite - How the fastest developers ship code | Graphite spr | Stacked Pull Requests on GitHub Stacked PRs Stacked Pull Requests · GitHub Marketplace · GitHub How to Handle Stacked Pull Requests on GitHub | PSPDFKit Stacked Pull Requests A Better Model for Stacked (GitHub) Pull Requests • Timothy Andrew Experimental Ideas as used in Linux Kernel GitHub - arxanas/git-branchless: High-velocity, monorepo-scale workflow for Git ","permalink":"https://blog.shaishav.kr/pages/efficient-git-workflow-with-stacked-prs/","summary":"Efficient Git Workflow with Stacked PRs Illustrate the problem Big PRs %% statistics about time spent by senior devs in PR reviews. short 2-3lines. quote with reference+statistics from mid sized startups %% %% why big PRs are harder to make sense of . general intro - 2 lines. %% %% define BIG PR. 400line changes as per google\u0026rsquo;s guidelines. short , 2 lines %% %% types of PR changes. chore vs feature, vs hotfix vs bugfix vs improvement.","title":"Efficient Git Workflow with Stacked PRs"},{"content":"markdown - Python docstrings to GitHub README.md - Stack Overflow python - Read The Docs not working with automodule - Stack Overflow\nreStructuredText vs Markdown for documentation\ndocs\n","permalink":"https://blog.shaishav.kr/pages/practitioners-guide-to-great-project-documentation-feat.-readthedocs/","summary":"markdown - Python docstrings to GitHub README.md - Stack Overflow python - Read The Docs not working with automodule - Stack Overflow\nreStructuredText vs Markdown for documentation\ndocs","title":"Practitioners Guide to Great Project Documentation feat. ReadTheDocs"},{"content":"Productivity Audits \u0026amp; the Fine art of Mastering Your Day Hot take: Download audio Are you ready to take control of your day and boost your productivity as an engineer or programmer? In this article, we\u0026rsquo;ll dive deep into the art of managing your day effectively, especially in a high-performance, remote work environment. Let\u0026rsquo;s explore how understanding your productivity cycle, tackling interruptions, and practicing leadership in your work can make all the difference.\nUnderstanding Your Productivity Cycle The Impact of Unplanned Interruptions Reacting to Interruptions: Synchronous vs. Asynchronous Setting Ground Rules for Focus Times Managing Email and Messages Strategically Mid-Morning Team Check-Ins Pre-Lunch Email Triage Second Half Focus Sessions Wrapping Up the Workday The Key to Sustainable Productivity %% ## Understanding Your Productivity Cycle To master your day, start by understanding your productivity cycle. We all have certain times when we\u0026rsquo;re at our best, and recognizing these peak hours can significantly boost your productivity. Are you a morning person or do you hit your stride in the afternoon? Identify your prime work hours and structure your day around them.\n2. The Impact of Unplanned Interruptions In the fast-paced world of engineering, interruptions are inevitable. But they can be productivity killers if not managed effectively. As we evolve, we must deal with unexpected tasks and requests. Recognize that these unplanned interruptions can disrupt your flow and plan accordingly.\n3. Reacting to Interruptions: Synchronous vs. Asynchronous Not all interruptions are created equal. Some require immediate attention, while others can wait. Differentiate between synchronous and asynchronous interruptions. Manage synchronous ones swiftly, and schedule time for asynchronous tasks, like email responses, later in the day to maintain focus.\n4. Setting Ground Rules for Focus Times One effective way to regain control of your schedule is by setting clear ground rules for your focus times. Communicate with colleagues and establish dedicated blocks on your calendar for deep work. Silence notifications, set status messages, and train your team to respect these focused periods.\n5. Managing Email and Messages Strategically Email and messages can quickly derail your day if not handled strategically. Avoid checking your inbox first thing in the morning. Instead, prioritize tasks and let important matters naturally surface. Devote time post-lunch to address emails and messages efficiently.\n6. Mid-Morning Team Check-Ins Mid-morning is an ideal time for team check-ins. It\u0026rsquo;s early enough to address any emerging issues and provide guidance for the day ahead. This practice fosters collaboration without overwhelming your schedule.\n7. Pre-Lunch Email Triage Before lunch, take a moment to triage your emails and make a to-do list. This way, you return from your break with a clear plan, minimizing post-lunch productivity dips.\n8. Second Half Focus Sessions In the afternoon, preserve your energy for another round of deep focus work. Allocate a 45-minute slot for intense concentration. Then, dedicate the final slot to winding down and wrapping up your day\u0026rsquo;s work.\n9. Wrapping Up the Workday As the workday concludes, reflect on your achievements. Did you make the most of your productive hours? By prioritizing and planning, you can optimize your productivity even in the face of interruptions.\n10. The Key to Sustainable Productivity To sum it up, mastering your day requires a clear understanding of your productivity patterns and the nature of interruptions you face. By strategically scheduling tasks, establishing focus times, and managing communications, you can lead your engineering or programming team to greater productivity heights.\nNow, let\u0026rsquo;s address some frequently asked questions to help you navigate your journey toward peak productivity.\nFAQs How can I identify my most productive hours? Pay attention to your energy and concentration levels throughout the day. Note when you feel most alert and focused. What should I do if my job involves constant interruptions? Set boundaries and communicate your focus times with colleagues. Advocate for better interruption management practices within your team. Is it essential to check emails and messages throughout the day? No, it\u0026rsquo;s not necessary. Designate specific times for email and message management to maintain a distraction-free workflow. How can I lead my team to adopt these productivity practices? Lead by example and share the benefits of these strategies with your team. Encourage open communication and collaboration. Can these principles be applied to remote work scenarios? Absolutely! Remote work often comes with unique challenges, but mastering your day for productivity remains just as crucial. By implementing these strategies and tailoring them to your specific work environment, you can elevate your productivity and leadership skills, ultimately contributing to the success of your engineering or programming team in a remote work setting.\nMeta Title: \u0026ldquo;Mastering Your Day for Peak Productivity in Engineering\u0026rdquo; Meta Description: Unlock the secrets of productivity, leadership, and high-performance teams in engineering, even in remote work scenarios. Learn to conquer interruptions and optimize your day for success.\nIntroduction: Hey there, productivity enthusiasts! Today, we\u0026rsquo;re diving into the art of mastering your day and taking control of your productivity. We all know how important it is to make the most of our time, especially in our fast-paced, ever-demanding work environments. So, let\u0026rsquo;s explore some practical tips and tricks to help you navigate your day-to-day tasks with ease.\nFinding Your Productivity Sweet Spot: First things first, understanding your productivity cycle is key. Every individual has a specific time of day when they are most productive. Some of us are early birds, while others thrive in the late hours. Take a moment to identify your productivity sweet spot and align your schedule accordingly. Knowing when you\u0026rsquo;re at your peak performance will set the foundation for a productive day.\nAuditing Your Day-to-Day Routine: Now, let\u0026rsquo;s audit how you\u0026rsquo;re actually running your day-to-day operations. It\u0026rsquo;s crucial to take an objective look at how you handle interruptions and distractions. As humans, we may experience a fight or flight response when unexpected tasks come our way. But remember, it\u0026rsquo;s essential to stay focused on our goals, even when faced with unplanned challenges.\nDealing with Unexpected Tasks: In any career, you\u0026rsquo;re bound to face unexpected tasks and urgent requests. It\u0026rsquo;s the nature of the game. However, even if these interruptions arise from deficiencies within your organization, they can still impact your performance evaluation. It\u0026rsquo;s up to you to rise above these challenges and maintain your productivity. In future blog posts, we\u0026rsquo;ll discuss strategies to address these deficiencies within your company.\nReacting to Interruptions: How you react to interruptions can greatly affect your productivity. Differentiate between synchronous and asynchronous interruptions. Synchronous interruptions demand immediate attention and disrupt your flow, while asynchronous interruptions can be addressed at a later, more convenient time. If you find yourself constantly bombarded with synchronous breaks, your ability to focus will inevitably diminish as the day progresses. Regain control by setting boundaries and communicating your focus times to colleagues.\nEstablishing Ground Rules: To regain control of your schedule, it\u0026rsquo;s time to set some ground rules. Talk to your colleagues and clarify your focus times. Communicate your availability and put it clearly on your calendar. Additionally, limit notifications from apps and consider signing out of collaboration platforms or setting a clear status indicating your availability. Initially, people may still interrupt, but as they become familiar with your boundaries, interruptions will decrease.\nOptimizing Your Workflow: One effective strategy is to allocate defined time slots for tasks such as checking messages and responding to emails. Avoid diving into your inbox first thing in the morning, as it often leads to unplanned work. Instead, trust that urgent matters will be brought to your attention. Mornings should be dedicated to focused, uninterrupted work. Use the first hour or two of your day to tackle important projects. Then, consider checking in with your team, providing direction, and overseeing their progress.\nBalancing Focus and Collaboration: As the day progresses, maintain a balance between focus work and collaboration. Before lunch, review your emails and create a list of tasks to address. Post-lunch, tackle these items, marking them off your list. Reserve at least one 45-minute slot in the second half of the day for deep, uninterrupted work. Wrap up the day with another focused time slot, allowing you to tie up loose ends. By following this structure, you\u0026rsquo;ll have roughly 255 minutes of productive work, with the rest dedicated to collaboration.\nConclusion: There you have it, folks! By taking control of your day, understanding your productivity cycle, and implementing effective strategies, you can maximize your output and minimize distractions. Remember to audit your time, analyze interruptions, and plan your day with clear demarcations of focus work. Strike a balance between individual and collaborative tasks to achieve your goals effectively. Stay tuned for more insightful blog posts, and until then, embrace the power\n","permalink":"https://blog.shaishav.kr/pages/productivity-audits-the-fine-art-of-mastering-your-day/","summary":"Productivity Audits \u0026amp; the Fine art of Mastering Your Day Hot take: Download audio Are you ready to take control of your day and boost your productivity as an engineer or programmer? In this article, we\u0026rsquo;ll dive deep into the art of managing your day effectively, especially in a high-performance, remote work environment. Let\u0026rsquo;s explore how understanding your productivity cycle, tackling interruptions, and practicing leadership in your work can make all the difference.","title":"Productivity Audits \u0026 the Fine art of Mastering Your Day"},{"content":"Rise of Internal Developer Portals (iDp) - Part 1 Introduction In today\u0026rsquo;s rapidly evolving software development landscape, staying ahead of the curve is crucial for success. One emerging trend that has gained significant traction is the adoption of Internal Developer Portals (iDp).\nIn this introductory blog post, we will explore the concept of iDp, its growing popularity in 2023, and why it is essential for modern software development.\nWhether you are a startup founder, a cloud-native enthusiast, or a Kubernetes aficionado, this blog series will provide you with practical insights to leverage the power of internal developer portals and maximize your team\u0026rsquo;s productivity.\nWhat are Internal Developer Portals (iDp)? Internal Developer Portals, or iDp, are centralized platforms designed to streamline the workflows of software developers within an organization. They provide developers with a unified and easily accessible interface to access tools, documentation, resources, and collaborate effectively. With managed Kubernetes and edge computing becoming increasingly prevalent, iDp plays a vital role in supporting the development of cloud-native applications and distributed systems.\nThe growing trend of internal developer portals in 2023 In 2023, we are witnessing a significant surge in the adoption of iDp across industries. As organizations strive to optimize their software development processes, they recognize the need for a centralized platform that empowers developers and enhances productivity. With the rapid growth of data pipelines and the increasing demand for cybersecurity measures, iDp offers a practical solution to address these challenges. By providing a single point of access to essential tools and resources, iDp simplifies the development lifecycle and enables teams to focus on building innovative solutions.\nImportance of adopting iDp in modern software development Adopting an internal developer portal is critical in the context of modern software development. In a fast-paced environment, where time-to-market and agility are paramount, iDp enables developers to work more efficiently by eliminating unnecessary overhead and reducing context-switching. By providing a centralized hub for collaboration and knowledge sharing, iDp promotes cross-team synergy and fosters a culture of innovation.\nFurthermore, with managed Kubernetes and edge computing gaining prominence, iDp serves as a strategic tool to manage and deploy applications seamlessly. It offers integration with CI/CD pipelines, ensuring smooth and automated deployment processes, which are essential in the era of rapid software iteration.\nAs such iDp\u0026rsquo;s help with taming the hidden time-traps eating into your teams productivity and sanity\nSilent Killer #1 #2 Fragmented toolchain (Dis)continuous CI/CD In the next blog post of this series, we will delve deeper into how iDp boosts developer productivity, streamlines workflows, and optimizes resource utilization. Stay tuned to explore the practical benefits of internal developer portals and learn about real-world use cases.\nSubscribe to our newsletter to receive updates on the upcoming blog posts, packed with actionable insights and best practices to unlock the full potential of internal developer portals in your organization. Don\u0026rsquo;t miss out on this opportunity to stay ahead in the ever-evolving software development landscape.\nSubscribe to our newsletter to stay updated with the latest trends and practices in modern software development.\nBoosting Developer Productivity Streamlining developer workflows through iDp Centralized access to tools, documentation, and resources Collaboration and knowledge sharing within development teams Integration with CI/CD pipelines for seamless deployment Reducing Wasted Engineering Efforts Eliminating redundant work and reinvention of the wheel Leveraging shared components and reusable code Enhancing code discoverability and reuse Managing technical debt and ensuring code quality Deep Dive: Exploring iDp Best Practices Designing an effective internal developer portal Choosing the right technologies and frameworks Implementing security measures and access controls Measuring and optimizing developer productivity Case studies and success stories from leading organizations Stay tuned for the upcoming blog post in this series, where we will dive deeper into the design and implementation of internal developer portals, showcasing best practices and real-world examples.\nThis post recounts the wise learnings from folks across the dev-sec-ops community. I would like to mention the following posts which nudged me to write my thoughts and learnings on the subject DevOps is Bullshit - Massdriver Blog The 5 Core Components of an Internal Developer Platform (IDP) | Internal Developer Platform\n","permalink":"https://blog.shaishav.kr/pages/rise-of-internal-developer-portals-idp-part-1/","summary":"Rise of Internal Developer Portals (iDp) - Part 1 Introduction In today\u0026rsquo;s rapidly evolving software development landscape, staying ahead of the curve is crucial for success. One emerging trend that has gained significant traction is the adoption of Internal Developer Portals (iDp).\nIn this introductory blog post, we will explore the concept of iDp, its growing popularity in 2023, and why it is essential for modern software development.\nWhether you are a startup founder, a cloud-native enthusiast, or a Kubernetes aficionado, this blog series will provide you with practical insights to leverage the power of internal developer portals and maximize your team\u0026rsquo;s productivity.","title":"Rise of Internal Developer Portals (iDp) - Part 1"}]